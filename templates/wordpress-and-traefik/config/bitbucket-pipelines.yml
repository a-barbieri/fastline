# This is a sample build configuration for Docker.
# Check our guides at https://confluence.atlassian.com/x/O1toN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: atlassian/default-image:2

pipelines:
  branches:
    staging:
      - step:
          name: Docker image build
          deployment: staging-build
          size: 2x
          services:
            - docker
          script:
            # Set $DOCKER_HUB_USERNAME and $DOCKER_HUB_PASSWORD as environment variables in repository settings.
            - export IMAGE_NAME="${GCR_IMAGE_PREFIX}/${BITBUCKET_REPO_SLUG}"

            # Build the Docker image.
            # WARNING: we are using Dockerfile.remote which will be used for both staging and production.
            - docker image build
              --tag "${IMAGE_NAME}:${BITBUCKET_COMMIT}"
              --file ./app/Dockerfile.remote
              --build-arg ENDPOINT
              --build-arg BASIC_AUTH_USER
              --build-arg BASIC_AUTH_PASSWORD
              --build-arg GA_TRACKING_ID
              ./app
            # Tag the image as latest (currently the only way to target the image from the remote server automatically).
            - docker image tag "${IMAGE_NAME}:${BITBUCKET_COMMIT}" "${IMAGE_NAME}:staging"

            # Authenticate with the Docker Hub registry.
            - echo $GCR_JSON_KEY | docker login --username _json_key --password-stdin $GCR_HOST
            # jq -c . ~/Sites/lacolonia-78b643d891a7.json | docker login --username _json_key --password-stdin eu.gcr.io
            # Push the new Docker image to the Docker registry.
            # docker push eu.gcr.io/lacolonia/aspect_admin:production-$(git rev-parse HEAD)
            # docker push eu.gcr.io/lacolonia/aspect_admin:production
            - docker push "${IMAGE_NAME}_app:${BITBUCKET_COMMIT}"
            - docker push "${IMAGE_NAME}_app:staging"
      - step:
          name: Deploy to remote server
          deployment: staging
          script:
            # Set name of the directory to which deploy.
            - export DEPLOY_DIRECTORY="~/${BITBUCKET_REPO_SLUG}"
            # Create the directory on the remote server.
            - echo "mkdir -p ${DEPLOY_DIRECTORY}" | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
            # Copy the docker-compose files to the deploy directory.
            - scp ./docker-compose.* $REMOTE_SERVER_USER@$REMOTE_SERVER_IP:$DEPLOY_DIRECTORY
            # Copy Traefik files to Traefik directory.
            - scp ./traefik/* $REMOTE_SERVER_USER@$REMOTE_SERVER_IP:~/traefik/dynamic/
            # Generate a file where to build deployment scripts
            - cat deploy_scripts.sh >> deploy_pipeline.sh
            # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" deploy_pipeline.sh
            # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" deploy_pipeline.sh
            # Execute commands to update the remote application.
            - cat deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
            # Generate a file where to build deployment scripts
            - cat post_deploy_scripts.sh >> post_deploy_pipeline.sh
            # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" post_deploy_pipeline.sh
            # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" post_deploy_pipeline.sh
            # Execute deployment scripts to update the remote application.
            - cat post_deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
    production:
      - step:
          name: Docker image build
          deployment: production-build
          size: 2x
          services:
            - docker
          script: # Modify the commands below to build your repository.
            # Set $DOCKER_HUB_USERNAME and $DOCKER_HUB_PASSWORD as environment variables in repository settings.
            - export IMAGE_NAME="${GCR_IMAGE_PREFIX}/${BITBUCKET_REPO_SLUG}"

            # Build the Docker image.
            # WARNING: we are using remote.Dockerfile which will be used for both staging and production.
            - docker image build
              --tag "${IMAGE_NAME}:${BITBUCKET_COMMIT}"
              --file ./app/remote.Dockerfile
              --build-arg ENDPOINT
              --build-arg BASIC_AUTH_USER
              --build-arg BASIC_AUTH_PASSWORD
              --build-arg GA_TRACKING_ID
              ./app
            # Tag the image as latest (currently the only way to target the image from the remote server automatically).
            - docker image tag "${IMAGE_NAME}:${BITBUCKET_COMMIT}" "${IMAGE_NAME}:production"

            # Authenticate with the Docker Hub registry.
            - echo $GCR_JSON_KEY | docker login --username _json_key --password-stdin $GCR_HOST
            # jq -c . ~/Sites/lacolonia-78b643d891a7.json | docker login --username _json_key --password-stdin eu.gcr.io
            # Push the new Docker image to the Docker registry.
            # docker push eu.gcr.io/lacolonia/aspect_admin:production-$(git rev-parse HEAD)
            # docker push eu.gcr.io/lacolonia/aspect_admin:production
            - docker push "${IMAGE_NAME}_app:${BITBUCKET_COMMIT}"
            - docker push "${IMAGE_NAME}_app:production"
      - step:
          name: Deploy to remote server
          deployment: production
          script:
            # Set name of the directory to which deploy.
            - export DEPLOY_DIRECTORY="~/${BITBUCKET_REPO_SLUG}"
            # Create the directory on the remote server.
            - echo "mkdir -p ${DEPLOY_DIRECTORY}" | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
            # Copy the docker-compose files to the deploy directory.
            - scp ./docker-compose.* $REMOTE_SERVER_USER@$REMOTE_SERVER_IP:$DEPLOY_DIRECTORY
            # Copy Traefik files to Traefik directory.
            - scp ./traefik/* $REMOTE_SERVER_USER@$REMOTE_SERVER_IP:~/traefik/dynamic/
            # Generate a file where to build deployment scripts
            - cat deploy_scripts.sh >> deploy_pipeline.sh
            # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" deploy_pipeline.sh
            # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" deploy_pipeline.sh
            # Execute commands to update the remote application.
            - cat deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
            # Generate a file where to build deployment scripts
            - cat post_deploy_scripts.sh >> post_deploy_pipeline.sh
            # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" post_deploy_pipeline.sh
            # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
            - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" post_deploy_pipeline.sh
            # Execute deployment scripts to update the remote application.
            - cat post_deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
definitions:
  services:
    docker:
      memory: 3072
